{"version":3,"sources":["components/InputForm/InputForm.module.css","components/Header/Header.module.css","utils/transitions/pop.module.css","components/ContactsFilter/ContactsFilter.module.css","utils/transitions/slide.module.css","utils/renderProp/ContactListSetter.js","utils/renderProp/Storage.js","components/Header/Header.js","components/InputForm/InputForm.js","components/ContactList/ContactList.js","components/ContactsFilter/ContactsFilter.js","App.js","index.js","components/ContactList/ContactList.module.css"],"names":["module","exports","ContactListSetter","children","useState","contactList","setContactList","query","setQuery","Storage","saveToStorage","key","value","localStorage","setItem","JSON","stringify","err","Error","getFromStorage","items","getItem","parse","Header","appear","setAppear","useEffect","className","styles","headerBlock","CSSTransition","in","classNames","slideIn","timeout","mountOnEnter","header","InputForm","name","setName","number","setNumber","changeHandler","e","target","onSubmit","preventDefault","contactListNames","map","contact","toLowerCase","newContactName","includes","toast","configure","error","id","uuidv4","addContact","type","onChange","inputField","disabled","length","btn","ContactList","filteredList","filter","unmountOnExit","TransitionGroup","component","popIn","contactListItem","onClick","updatedList","onDelete","ContactsFilter","input","placeholder","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.99569324.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputField\":\"InputForm_inputField__2PQ4y\",\"btn\":\"InputForm_btn__mIVe0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerBlock\":\"Header_headerBlock__3Xc6q\",\"header\":\"Header_header__R7Xw6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"pop_enter__Dvtla\",\"enterActive\":\"pop_enterActive__1zr69\",\"exitActive\":\"pop_exitActive__3LZ1c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"ContactsFilter_input__21tlx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"slide_enter__3BiMQ\",\"enterActive\":\"slide_enterActive__25RuS\",\"exitActive\":\"slide_exitActive__HgFSs\"};","import { useState } from \"react\";\r\n\r\nconst ContactListSetter = ({ children }) => {\r\n  const [contactList, setContactList] = useState([]);\r\n  const [query, setQuery] = useState(\"\");\r\n  return children({\r\n    contactList,\r\n    setContactList,\r\n    query,\r\n    setQuery,\r\n  });\r\n};\r\n\r\nexport default ContactListSetter;\r\n","const Storage = ({ children }) => {\r\n  const save = (key, value) => {\r\n    try {\r\n      localStorage.setItem(key, JSON.stringify(value));\r\n    } catch (err) {\r\n      throw new Error();\r\n    }\r\n  };\r\n\r\n  const get = (key) => {\r\n    try {\r\n      const items = localStorage.getItem(key);\r\n      return items ? JSON.parse(items) : null;\r\n    } catch (err) {\r\n      throw new Error();\r\n    }\r\n  };\r\n\r\n  return children({\r\n    saveToStorage: save,\r\n    getFromStorage: get,\r\n  });\r\n};\r\n\r\nexport default Storage;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport styles from \"./Header.module.css\";\r\nimport slideIn from \"../../utils/transitions/slide.module.css\";\r\n\r\nconst Header = () => {\r\n  const [appear, setAppear] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setAppear(true);\r\n  }, []);\r\n\r\n  return (\r\n    <header className={styles.headerBlock}>\r\n      <CSSTransition\r\n        in={appear}\r\n        classNames={slideIn}\r\n        timeout={500}\r\n        mountOnEnter\r\n      >\r\n        <h1 className={styles.header}>Phonebook</h1>\r\n      </CSSTransition>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nimport styles from \"./InputForm.module.css\";\r\n\r\nconst InputForm = ({ contactList, setContactList }) => {\r\n  const [name, setName] = useState(\"\");\r\n  const [number, setNumber] = useState(\"\");\r\n\r\n  const changeHandler = (e) => {\r\n    if (e.target.name === \"name\") {\r\n      setName(e.target.value);\r\n    }\r\n    if (e.target.name === \"number\") {\r\n      setNumber(e.target.value);\r\n    }\r\n  };\r\n\r\n  const addContact = () => {\r\n    const contactListNames = contactList.map((contact) =>\r\n      contact.name.toLowerCase()\r\n    );\r\n    const newContactName = name.toLowerCase();\r\n    if (contactListNames.includes(newContactName)) {\r\n      toast.configure();\r\n      toast.error(`${name} is already in your contact list`);\r\n    } else {\r\n      setContactList([\r\n        { id: uuidv4(), name: name, number: number },\r\n        ...contactList,\r\n      ]);\r\n    }\r\n  };\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    addContact();\r\n\r\n    setName(\"\");\r\n    setNumber(\"\");\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={submitHandler}>\r\n      <label>\r\n        Name:\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          value={name}\r\n          onChange={changeHandler}\r\n          className={styles.inputField}\r\n        />\r\n      </label>\r\n      <label>\r\n        Number:\r\n        <input\r\n          type=\"text\"\r\n          name=\"number\"\r\n          value={number}\r\n          onChange={changeHandler}\r\n          className={styles.inputField}\r\n        />\r\n      </label>\r\n      <button\r\n        type=\"submit\"\r\n        disabled={!name.length || !number.length}\r\n        className={styles.btn}\r\n      >\r\n        Add contact\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nInputForm.propTypes = {\r\n  contactList: PropTypes.oneOfType([\r\n    PropTypes.arrayOf(\r\n      PropTypes.exact({\r\n        id: PropTypes.string.isRequired,\r\n        name: PropTypes.string.isRequired,\r\n        number: PropTypes.string.isRequired,\r\n      })\r\n    ),\r\n    PropTypes.array,\r\n  ]).isRequired,\r\n  setContactList: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default InputForm;\r\n","import React, { useEffect } from \"react\";\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\nimport PropTypes from \"prop-types\";\r\nimport popIn from \"../../utils/transitions/pop.module.css\";\r\nimport slideIn from \"../../utils/transitions/slide.module.css\";\r\nimport styles from \"./ContactList.module.css\";\r\n\r\nconst ContactList = ({\r\n  contactList,\r\n  setContactList,\r\n  saveToStorage,\r\n  getFromStorage,\r\n  query,\r\n}) => {\r\n  const onDelete = (id) => {\r\n    const updatedList = contactList.filter((contact) => contact.id !== id);\r\n    setContactList([...updatedList]);\r\n  };\r\n\r\n  const filteredList = contactList.filter(\r\n    (contact) =>\r\n      contact.name.toLowerCase().includes(query.toLowerCase()) ||\r\n      contact.number.includes(query)\r\n  );\r\n\r\n  useEffect(() => {\r\n    setContactList(getFromStorage(\"contacts\"));\r\n  }, [setContactList, getFromStorage]);\r\n\r\n  useEffect(() => {\r\n    saveToStorage(\"contacts\", contactList);\r\n  }, [contactList, saveToStorage]);\r\n\r\n  return (\r\n    <>\r\n      <CSSTransition\r\n        in={!contactList.length}\r\n        timeout={250}\r\n        classNames={slideIn}\r\n        mountOnEnter\r\n        unmountOnExit\r\n      >\r\n        <p>Phonebook is empty</p>\r\n      </CSSTransition>\r\n\r\n      <TransitionGroup component=\"ul\" className={styles.contactList}>\r\n        {filteredList.map((contact) => (\r\n          <CSSTransition key={contact.id} classNames={popIn} timeout={250}>\r\n            <li className={styles.contactListItem}>\r\n              <span className={styles.name}>{contact.name}</span>\r\n              <span className={styles.number}>{contact.number}</span>\r\n              <button type=\"button\" onClick={() => onDelete(contact.id)}>\r\n                &#215;\r\n              </button>\r\n            </li>\r\n          </CSSTransition>\r\n        ))}\r\n      </TransitionGroup>\r\n    </>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  contactList: PropTypes.oneOfType([\r\n    PropTypes.arrayOf(\r\n      PropTypes.exact({\r\n        id: PropTypes.string.isRequired,\r\n        name: PropTypes.string.isRequired,\r\n        number: PropTypes.string.isRequired,\r\n      })\r\n    ),\r\n    PropTypes.array,\r\n  ]).isRequired,\r\n  setContactList: PropTypes.func.isRequired,\r\n  saveToStorage: PropTypes.func.isRequired,\r\n  getFromStorage: PropTypes.func.isRequired,\r\n  query: PropTypes.string,\r\n};\r\n\r\nexport default ContactList;\r\n","import React from \"react\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./ContactsFilter.module.css\";\r\nimport slideIn from \"../../utils/transitions/slide.module.css\";\r\n\r\nconst ContactsFilter = ({ contactList, setQuery }) => {\r\n  const inputChangeHandler = (e) => {\r\n    const { value } = e.target;\r\n\r\n    setQuery(value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <CSSTransition\r\n        in={contactList.length > 1}\r\n        classNames={slideIn}\r\n        timeout={250}\r\n        mountOnEnter\r\n        unmountOnExit\r\n      >\r\n        <input\r\n          type=\"text\"\r\n          onChange={inputChangeHandler}\r\n          className={styles.input}\r\n          placeholder=\"Enter needed name or number\"\r\n        />\r\n      </CSSTransition>\r\n    </>\r\n  );\r\n};\r\n\r\nContactsFilter.propTypes = {\r\n  contactList: PropTypes.oneOfType([\r\n    PropTypes.arrayOf(\r\n      PropTypes.exact({\r\n        id: PropTypes.string.isRequired,\r\n        name: PropTypes.string.isRequired,\r\n        number: PropTypes.string.isRequired,\r\n      })\r\n    ),\r\n    PropTypes.array,\r\n  ]).isRequired,\r\n  setQuery: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactsFilter;\r\n","import React from \"react\";\nimport ContactListSetter from \"./utils/renderProp/ContactListSetter\";\nimport Storage from \"./utils/renderProp/Storage\";\nimport Header from \"./components/Header/Header\";\nimport InputForm from \"./components/InputForm/InputForm\";\nimport ContactList from \"./components/ContactList/ContactList\";\nimport ContactsFilter from \"./components/ContactsFilter/ContactsFilter\";\n\nfunction App() {\n  return (\n    <>\n      <Header />\n      <Storage>\n        {({ saveToStorage, getFromStorage }) => (\n          <ContactListSetter>\n            {({ contactList, setContactList, query, setQuery }) => (\n              <>\n                <InputForm\n                  contactList={contactList}\n                  setContactList={setContactList}\n                  saveToStorage={saveToStorage}\n                />\n                <ContactsFilter contactList={contactList} setQuery={setQuery} />\n                <ContactList\n                  contactList={contactList}\n                  setContactList={setContactList}\n                  saveToStorage={saveToStorage}\n                  getFromStorage={getFromStorage}\n                  query={query}\n                />\n              </>\n            )}\n          </ContactListSetter>\n        )}\n      </Storage>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  // <React.StrictMode>\n  <App />,\n  /* </React.StrictMode>, */\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__2T83w\",\"contactListItem\":\"ContactList_contactListItem__1A8WS\",\"name\":\"ContactList_name__21Jni\",\"number\":\"ContactList_number__2X_iO\"};"],"sourceRoot":""}